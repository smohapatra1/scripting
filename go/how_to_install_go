
https://golang.org/doc/install#install

#Installation:-
#**********************
sudo apt-get update
curl -O https://storage.googleapis.com/golang/go1.13.1.linux-amd64.tar.gz
tar -C /usr/local -xvf go1.13.1.linux-amd64.tar.gz

#Add /usr/local/go/bin to the PATH environment variable. 
#You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile:

export PATH=$PATH:/usr/local/go/bin

#or

export GOPATH=$HOME/<your go path>
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

#This directory will be the directory where all your awesome golang magic will happen and go get will put all the files.
go get

PATH=$PATH:/usr/local/go/ - in ~/.profile

source ~/.profile
#Note **********
#The package should put the /usr/local/go/bin directory in your PATH environment variable. You may need to restart any open Terminal sessions for the change to take effect.

#Testing/Verifying installation
#************************
go version
mkdir $HOME/work
export GOPATH=$HOME/work
export GOPATH=$HOME
#You can create your own project 
mkdir -p work/src/github.com/user/hello
#Next, you can create a simple “Hello World” Go file.
nano work/src/github.com/user/hello/hello.go
#Inside your editor, paste in the content below, which uses the main Go packages, imports the formatted IO content component, and sets a new function to print ‘Hello World’ when run.
package main
import "fmt"
func main() {
    fmt.Printf("hello, world\n")
}
#This will build the file 
go install github.com/user/hello

#With the file compiled, you can run it by simply referring to the file at your Go path.
sudo $GOPATH/bin/hello

#If that command returns “Hello World”, then Go is successfully installed
#
#Uninstalling Go
#****************

#To remove an existing Go installation from your system 
#delete the go directory. This is usually /usr/local/go under Linux, macOS, and FreeBSD or c:\Go under Windows.
#

#You should also remove the Go bin directory from your PATH environment variable. Under Linux and FreeBSD you should edit /etc/profile or $HOME/.profile. If you installed Go with the macOS package then you should remove the /etc/paths.d/go file. Windows users should read the section about setting environment variables under Windows.#







#*********************


sudo snap install go --classic
sudo apt-get update
sudo apt-get -y upgrade
curl -O https://storage.googleapis.com/golang/go1.13.1.linux-amd64.tar.gz
tar -C /usr/local -xvf go1.11.2.linux-amd64.tar.gz
#sudo mv go /usr/local
#Setup
#****************
#Config set-up
sudo nano ~/.profile
#At the end of the file, add this line:
export GOPATH=$HOME/work
export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin
#$HOME/work can point to any directory. 
This directory will be the directory where all your awesome golang magic will happen and go get will put all the files.
go get

#If you chose an alternate installation location for Go, 
#add these lines instead to the same file. This example shows the commands if Go is installed in your home directory:
export GOROOT=$HOME/go
export GOPATH=$HOME/work
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
source ~/.profile
#Testing/Verifying installation
#************************
go version
mkdir $HOME/work
export GOPATH=$HOME/work
export GOPATH=$HOME
#You can create your own project 
mkdir -p work/src/github.com/user/hello
#Next, you can create a simple “Hello World” Go file.
nano work/src/github.com/user/hello/hello.go
#Inside your editor, paste in the content below, which uses the main Go packages, imports the formatted IO content component, and sets a new function to print ‘Hello World’ when run.
package main
import "fmt"
func main() {
    fmt.Printf("hello, world\n")
}
#This will build the file 
go install github.com/user/hello

#With the file compiled, you can run it by simply referring to the file at your Go path.
sudo $GOPATH/bin/hello

#If that command returns “Hello World”, then Go is successfully installed
